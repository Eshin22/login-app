### Test Teacher Add Comment API

# Base URL
@baseUrl = http://localhost:3000
@paperId = 6747b123456789abcdefghij

### 1. PUT - Add a simple teacher comment
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "{{paperId}}",
  "comment": "This paper has been reviewed and approved for printing. Good work overall."
}

###

### 2. PUT - Add a detailed teacher comment
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "{{paperId}}",
  "comment": "The paper content is well-structured and meets the academic standards. Minor formatting issues have been noted but they don't affect the overall quality. Ready for final printing process."
}

###

### 3. PUT - Add comment with special characters
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "{{paperId}}",
  "comment": "Paper quality: ★★★★☆. Comments: The methodology is sound & the conclusions are well-supported. Some grammatical errors need attention (approx. 2-3 per page)."
}

###

### 4. PUT - Add very long teacher comment
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "{{paperId}}",
  "comment": "This paper demonstrates excellent research capabilities and thorough analysis of the subject matter. The introduction provides clear context and the methodology section is comprehensive. The data analysis is well-presented with appropriate charts and graphs. However, I noticed some areas that could be improved: 1) The conclusion section could be more concise, 2) Some references need proper formatting according to academic standards, 3) The discussion section would benefit from more critical analysis. Overall, this is a high-quality submission that meets the requirements for publication. The student has shown good understanding of the topic and has presented the findings in a clear and organized manner."
}

###

### 5. PUT - Test error case - Missing paper ID
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "comment": "This should fail because paperId is missing"
}

###

### 6. PUT - Test error case - Missing comment
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "{{paperId}}"
}

###

### 7. PUT - Test error case - Empty comment
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "{{paperId}}",
  "comment": ""
}

###

### 8. PUT - Test error case - Comment with only spaces
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "{{paperId}}",
  "comment": "   "
}

###

### 9. PUT - Test error case - Non-existent paper ID
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "123456789012345678901234",
  "comment": "This should fail because the paper doesn't exist"
}

###

### 10. PUT - Test error case - Invalid paper ID format
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "invalid-id-format",
  "comment": "This should fail due to invalid ObjectId format"
}

###

### 11. PUT - Add multiple comments (test sequential addition)
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "{{paperId}}",
  "comment": "First comment: Initial review completed."
}

###

### 12. PUT - Add second comment to same paper
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "{{paperId}}",
  "comment": "Second comment: Additional feedback after student revisions."
}

###

### 13. PUT - Add third comment to same paper
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "{{paperId}}",
  "comment": "Final comment: Paper approved for printing."
}

###

### 14. PUT - Test comment with line breaks and formatting
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "{{paperId}}",
  "comment": "Paper Review Summary:\n\n✓ Content Quality: Excellent\n✓ Research Depth: Good\n✓ Writing Style: Clear and concise\n\nRecommendation: Approve for printing"
}

###

### 15. PUT - Test comment with numbers and academic formatting
PUT {{baseUrl}}/api/teacher/add-comment
Content-Type: application/json

{
  "paperId": "{{paperId}}",
  "comment": "Grade: A- (87/100). Strengths: 1) Well-organized structure, 2) Strong evidence base, 3) Clear arguments. Areas for improvement: 1) Citation formatting, 2) Abstract clarity. Overall assessment: High quality work suitable for publication."
}

###

### Instructions for testing:
# 1. Make sure your Next.js app is running on localhost:3000
# 2. Replace the @paperId variable with an actual paper ID from your database
# 3. Run each test individually to see the responses
# 4. Check the database to verify teacherComments array is updated correctly
# 5. Test the sequential addition of multiple comments to ensure array functionality

### To get a real paper ID for testing:
# Open MongoDB Compass or MongoDB shell and run:
# db.papers.findOne({}, {_id: 1, title: 1, teacherComments: 1})
# Copy the _id value and replace @paperId above

### Expected successful response:
# {
#   "message": "Comment added successfully"
# }

### Expected error responses:
# - Missing paperId: {"message": "Paper ID and comment are required"}
# - Missing comment: {"message": "Paper ID and comment are required"}
# - Paper not found: {"message": "Paper not found"}
# - Server error: {"message": "Failed to add comment"}

### To verify results in database:
# db.papers.findOne({_id: ObjectId("your-paper-id")}, {teacherComments: 1})
# Should show array of teacher comments with timestamps
